#include<stdint.h>
#include<stm32f4xx.h>
#include<string.h>
#include<stdio.h>
/*void LDR_init()  //digital ip based sensor
{
	RCC->AHB1ENR|= (1<<1); //GPIOB clk enable
	GPIOB->MODER&= ~(0xc); //Reset Pb1 00 set as ip mode
	GPIOB->MODER|= (0x10);   //Set Pb2 op mode  buzzer
	GPIOB->PUPDR|= (0x8); //Set Pb1 acts as Pull down configuration avoid floating
}*/
void delay()
{
	for (uint32_t i=0; i<=70000;i++); //Empty loop
}
void MQ135_init() //Analog based sensor
{
	  RCC->AHB1ENR|= (1<<0); //GPIOA Peripheral Enable
	  RCC->APB2ENR|= (1<<8); //ADC peripheral Enable
	  GPIOA->MODER|= (0xc0);//Set as analog mode 1100 = 12 at PA2
	  ADC1->CR2|= (1<<0); //ADON enable
	  ADC1->SQR3=2; //ADc chnl 2
	  for(volatile int i=0; i<=20000; i++); //empty loop
	  ADC1->CR2|= (1<<30); //Conversion Starts
	  ADC1->CR2|= (1<<1); // contineous Conversion
}
void USART_init()
{
	RCC->APB1ENR|= (1<<17); //enable usart clk
	GPIOA->MODER|= (0xA0); //Enable PA2tx &A3rx 1010 -A   alretnative Moder pin for using communication
	GPIOA->AFR[0]|= (0x700); //tx 0111 pA2 transmit the data
	for(volatile int i=0; i<=20000;i++);
	// Set baud rate to 9600 for 16 MHz clock -> BRR = 16000000 / 9600 = ~1666 = 0x0682
	USART2->BRR =  0x0682;
	USART2->CR1|= (1<<13);  //Usart enable
	USART2->CR1|= (1<<3); //TX enable
}
void USART2_SendString(const char *str)
{
    while (*str)
    {
        while (!(USART2->SR & (1<<7))); // Wait until transmit data register is empty
        USART2->DR = (*str & 0xFF);
        str++;
    }
}
int main(void)

{
	MQ135_init();
	USART_init();
	int temperature;

	char buffer[60];
	uint32_t adc_Value;
	while(1)
	{
		while(!(ADC1->SR & (1<<1)));  // waiting for the conversion completing
		adc_Value = ADC1->DR;   // if value is 1 inside the loop value is 0 outside the loop
		delay();
		if (((GPIOB->IDR & (1 << 1)) != 0) && (adc_Value >= 1100 || temperature >= 40))

		{
			sprintf(buffer,"Unhealthy AIR Move To Safe Zone \r\n");
			for(volatile int i=0;i<=10000;i++);
			USART2_SendString(buffer);
            GPIOB->ODR|= (1<<2);
		}
		else
		{
			GPIOB->ODR&= ~(1<<2);
			sprintf(buffer,"Fresh AIR  %lu \r\n");
			USART2_SendString(buffer);
		}
		delay();
}}
